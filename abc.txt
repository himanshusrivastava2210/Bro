main


case 5:

					airlineService = new AirlineServiceImpl();

					System.out.println("Enter Flight Number:");
					flightNO = sc.next();
					
					while (true) {
						try {
							if (airlineService.validateFlightNO(flightNO)) {
								break;
							} else {
								System.err
										.println("Please enter valid flight number only, try again");
								flightNO = sc.next();
							}
						} catch (AirLineException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}

					flightBean = getflightDetails(flightNO);

					if (flightBean != null) {
						System.out.println("getAirLine()		:"
								+ flightBean.getAirLine());
						System.out.println("getDepCity()		:"
								+ flightBean.getDepCity());
						System.out.println("getArrCity()		:"
								+ flightBean.getArrCity());
						System.out.println("getDepDate()		:"
								+ flightBean.getDepDate());
						System.out.println("getArrDate()		:"
								+ flightBean.getArrDate());
						System.out.println("getDepTime()		:"
								+ flightBean.getDepTime());
						System.out.println("getArrTime()		:"
								+flightBean.getArrTime());
						System.out.println("getFristSeat()		:"
								+ flightBean.getFristSeat());
						System.out.println("getFristSeatFare()		:"
								+ flightBean.getFristSeatFare());
						System.out.println("getBussSeat()		:"
								+ flightBean.getBussSeat());
						System.out.println("getBussSeatFare()		:"
								+ flightBean.getBussSeatFare());
					} else {
						System.err
								.println("There are no Flight is associated with Flight number "
										+ flightNO);
					}
					break;


daoImpl

public FlightBean viewflightDetails(String flightNO) throws AirLineException {
		
		Connection connection=DBConnection.getInstance().getConnection();
		
		
		PreparedStatement preparedStatement=null;
		ResultSet resultset = null;
		FlightBean flightBean=null;
		
		try
		{
			preparedStatement=connection.prepareStatement(QueryMapper.VIEW_FLIGHT_DETAILS_QUERY);
			preparedStatement.setString(1,flightNO);
			resultset=preparedStatement.executeQuery();
			
			if(resultset.next())
			{
				flightBean = new FlightBean();
				flightBean.setAirLine(resultset.getString(1));
				flightBean.setDepCity(resultset.getString(2));
				flightBean.setArrCity(resultset.getString(3));
				flightBean.setDepDate(resultset.getDate(4));
				flightBean.setArrDate(resultset.getDate(5));
				flightBean.setDepTime(resultset.getString(6));
				flightBean.setArrTime(resultset.getString(7));
				flightBean.setFristSeat(resultset.getInt(8));
				flightBean.setFristSeatFare(resultset.getInt(9));
				flightBean.setBussSeat(resultset.getInt(10));
				flightBean.setBussSeatFare(resultset.getInt(11));
				
			}
			
			if( flightBean != null)
			{
				logger.info("Record Found Successfully");
				return flightBean;
			}
			else
			{
				logger.info("Record Not Found Successfully");
				return null;
			}
			
		}
		catch(Exception e)
		{
			logger.error(e.getMessage());
			throw new AirLineException(e.getMessage());
		}
		finally
		{
			try 
			{
				resultset.close();
				preparedStatement.close();
				connection.close();
			} 
			catch (SQLException e) 
			{
				logger.error(e.getMessage());
				throw new AirLineException("Error in closing db connection");

			}
		}
		
	}




dao

public FlightBean viewflightDetails(String flightNO) throws AirLineException;

querry

public static final String VIEW_FLIGHT_DETAILS_QUERY="SELECT AirLine,DepCity,ArrCity,DepDate,ArrDate,DepTime,ArrTime,FristSeat,FristSeatFare,BussSeat,BussSeatFare FROM FlightInformation WHERE  FlightNO=?";



serviceimpl

public FlightBean viewflightDetails(String flightNo) throws AirLineException {
	airlineDao=new AirlineDaoImpl();
	FlightBean flightBean=null;
	flightBean=airlineDao.viewflightDetails(flightNo);
	return flightBean;
}


service

public FlightBean viewflightDetails(String flightNo) throws AirLineException ;




test


package com.capgemini.test;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.capgemini.beans.BookingBean;
import com.capgemini.dao.AirlineDaoImpl;
import com.capgemini.dao.IAirlineDAO;
import com.capgemini.exception.AirLineException;
import com.capgemini.service.AirlineServiceImpl;
import com.capgemini.service.IAirlineService;

import junit.framework.Assert;

public class airlinetest {
	
	
	
	@Test
	public void testInsert(){
		BookingBean s1= new BookingBean();
		s1.setBookingId("1");
		s1.setCustEmail("cap@capgemini.com");
		s1.setNoOfPassengers(3);
		s1.setClassType("Business");
		s1.setTotalfare(10000);
		s1.setSeatNumber("6");
		s1.setCreditCardInfo("1234567890");
		s1.setSrcCity("Pune");
		s1.setDestCity("Kolkata");
		
		IAirlineDAO dao= new AirlineDaoImpl();
		try {
			@SuppressWarnings("unused")
			String s=dao.addBookingDetails(s1);
			Assert.assertNotSame(0,s1.getBookingId());
		} catch (AirLineException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}	
	@Test(expected=AirLineException.class)
	public void testInsertForInvalidCourseCode() throws AirLineException{
		BookingBean s1= new BookingBean();
		s1.setBookingId("1");;
		s1.setCustEmail("cap@capgemini.com");
		s1.setNoOfPassengers(100);
		s1.setClassType("Business");
		s1.setTotalfare(100);
		s1.setSeatNumber("6");
		s1.setCreditCardInfo("1234569870");
		s1.setSrcCity("Pune");
		s1.setDestCity("Kolkata");
		IAirlineDAO dao= new AirlineDaoImpl();
		@SuppressWarnings("unused")
		String s=dao.addBookingDetails(s1);
	}
	

}
